"""
1. Реализовать класс Matrix (матрица). Обеспечить перегрузку конструктора класса (метод __init__()),
который должен принимать данные (список списков) для формирования матрицы.
Подсказка: матрица — система некоторых математических величин, расположенных в виде прямоугольной схемы.
Примеры матриц вы найдете в методичке.
Следующий шаг — реализовать перегрузку метода __str__() для вывода матрицы в привычном виде.
Далее реализовать перегрузку метода __add__() для реализации операции сложения двух объектов класса Matrix (двух матриц).
Результатом сложения должна быть новая матрица.
Подсказка: сложение элементов матриц выполнять поэлементно — первый элемент первой строки первой матрицы складываем с первым элементом первой строки второй матрицы и т.д.
"""
class Matrix:
    def __init__(self, my_list):
        self.my_list = my_list

    def __str__(self):
        # Внешний цикл проходит по строкам матрицы (row), а внутренний цикл проходит по элементам каждой строки (x)
        for my_row in self.my_list:
            for my_string in my_row:
                print(f"{my_string:>3}", end="") # выводим красиво (через:>3) на случай наличия отрицательных, а для "квадратности" нашей матрицы заменяем \n на отсутстивие символа
            print()
        return '----------'

    def __add__(self, second):
        # тут обычное классическое сложение
        for i in range(len(self.my_list)):
            for j in range(len(second.my_list)):
                self.my_list[i][j] = self.my_list[i][j] + second.my_list[i][j]
        return Matrix.__str__(self)


first_matrix = Matrix([[5, -7, 0],[-3, 0, 2],[0, 2, -2]])
second_matrix = Matrix([[-2, 0, 1],[0, 7, -3],[3, -9, 3]])

print(first_matrix.__str__()) #первая
print(second_matrix.__str__()) #вторая
print(first_matrix.__add__(second_matrix)) #сумма